name: Cross-Platform Testing

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary: vet-linux
            go_remove: |
              sudo rm -rf /usr/local/go
              sudo apt-get remove -y golang-go || true
              sudo apt-get autoremove -y
            test_cmd: ./vet-linux version
          - os: macos-latest
            binary: vet-darwin
            go_remove: |
              sudo rm -rf /usr/local/go /usr/local/bin/go
              brew uninstall go || true
            test_cmd: ./vet-darwin version
          - os: windows-latest
            binary: vet-windows.exe
            go_remove: |
              Remove-Item -Path "C:\Program Files\Go" -Recurse -Force -ErrorAction SilentlyContinue
              Remove-Item -Path "C:\hostedtoolcache\windows\go" -Recurse -Force -ErrorAction SilentlyContinue
              $env:PATH = ($env:PATH.Split(';') | Where-Object { $_ -notlike "*\Go*" }) -join ';'
            test_cmd: .\vet-windows.exe version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Build native binary for each OS
      - name: Build binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          go build -o ${{ matrix.binary }}
          chmod +x ${{ matrix.binary }}

      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        run: go build -o ${{ matrix.binary }}
        shell: powershell

      # Save binary as an artifact for reinstall test
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: ${{ matrix.binary }}
          retention-days: 1

      # Remove Go before testing the binary
      - name: Remove Go (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: ${{ matrix.go_remove }}
        shell: bash

      - name: Remove Go (Windows)
        if: matrix.os == 'windows-latest'
        run: ${{ matrix.go_remove }}
        shell: powershell

      # Verify Go is removed
      - name: Verify Go is removed (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v go &> /dev/null; then
            echo "ERROR: Go is still installed!"
            exit 1
          else
            echo "Confirmed: Go is not available"
          fi
        shell: bash

      - name: Verify Go is removed (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Get-Command go -ErrorAction SilentlyContinue) {
            Write-Host "ERROR: Go is still installed!"
            exit 1
          } else {
            Write-Host "Confirmed: Go is not available"
          }
        shell: powershell

      # Test the binary without Go installed
      - name: Test binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: ${{ matrix.test_cmd }}
        shell: bash

      - name: Test binary (Windows)
        if: matrix.os == 'windows-latest'
        run: ${{ matrix.test_cmd }}
        shell: powershell