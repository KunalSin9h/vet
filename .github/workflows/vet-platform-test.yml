name: Cross-Platform Binary Testing

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  # First job: Build binaries for different platforms
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' 

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          # Set crosscompile C compiler based on target architecture
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
          fi
          
          # Set output filename based on OS
          if [ "${{ matrix.os }}" == "windows" ]; then
            OUTPUT="vet-${{ matrix.os }}-${{ matrix.arch }}.exe"
          else
            OUTPUT="vet-${{ matrix.os }}-${{ matrix.arch }}"
          fi
          
          # Build the binary with specific OS and architecture
          go build -o $OUTPUT
          
          # Make binary executable for non-Windows
          if [ "${{ matrix.os }}" != "windows" ]; then
            chmod +x $OUTPUT
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: vet-${{ matrix.os }}-${{ matrix.arch }}
          path: vet-${{ matrix.os }}-${{ matrix.arch }}*
          retention-days: 1  # Keep only for the duration of the workflow

  # Second job: Test binaries on respective platforms
  test:
    needs: build
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: darwin
            arch: amd64
            runner: macos-latest
          - os: windows
            arch: amd64
            runner: windows-latest

    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: vet-${{ matrix.os }}-${{ matrix.arch }}

      - name: Make binary executable (non-Windows)
        if: matrix.os != 'windows'
        run: chmod +x cli-${{ matrix.os }}-${{ matrix.arch }}
        shell: bash

      - name: Test CLI (non-Windows)
        if: matrix.os != 'windows'
        run: |
          # Verify Go is not installed
          if command -v go &> /dev/null; then
            echo "Warning: Go is installed on the runner"
          fi
          
          # Test basic command (adjust as needed)
          ./vet-${{ matrix.os }}-${{ matrix.arch }} version
        shell: bash

      - name: Test CLI (Windows)
        if: matrix.os == 'windows'
        run: |
          # Test basic command (adjust as needed)
          .\vet-${{ matrix.os }}-${{ matrix.arch }}.exe -version
        shell: powershell