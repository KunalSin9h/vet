// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/safedep/vet/ent/codesourcefile"
	"github.com/safedep/vet/ent/predicate"
)

// CodeSourceFileDelete is the builder for deleting a CodeSourceFile entity.
type CodeSourceFileDelete struct {
	config
	hooks    []Hook
	mutation *CodeSourceFileMutation
}

// Where appends a list predicates to the CodeSourceFileDelete builder.
func (csfd *CodeSourceFileDelete) Where(ps ...predicate.CodeSourceFile) *CodeSourceFileDelete {
	csfd.mutation.Where(ps...)
	return csfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (csfd *CodeSourceFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, csfd.sqlExec, csfd.mutation, csfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (csfd *CodeSourceFileDelete) ExecX(ctx context.Context) int {
	n, err := csfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (csfd *CodeSourceFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(codesourcefile.Table, sqlgraph.NewFieldSpec(codesourcefile.FieldID, field.TypeInt))
	if ps := csfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, csfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	csfd.mutation.done = true
	return affected, err
}

// CodeSourceFileDeleteOne is the builder for deleting a single CodeSourceFile entity.
type CodeSourceFileDeleteOne struct {
	csfd *CodeSourceFileDelete
}

// Where appends a list predicates to the CodeSourceFileDelete builder.
func (csfdo *CodeSourceFileDeleteOne) Where(ps ...predicate.CodeSourceFile) *CodeSourceFileDeleteOne {
	csfdo.csfd.mutation.Where(ps...)
	return csfdo
}

// Exec executes the deletion query.
func (csfdo *CodeSourceFileDeleteOne) Exec(ctx context.Context) error {
	n, err := csfdo.csfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{codesourcefile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (csfdo *CodeSourceFileDeleteOne) ExecX(ctx context.Context) {
	if err := csfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
